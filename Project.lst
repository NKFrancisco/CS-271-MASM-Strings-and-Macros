Microsoft (R) Macro Assembler Version 14.29.30141.0	    06/06/22 22:57:32
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Nick Francisco 
				; Last Modified: 5/22/2022
				; OSU email address: francnic@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                 Due Date: 6/5/2022
				; Description: This program reads in a string and converts and stores them 
				;	in an array of SDWORDs, it also prints the SDWORD array as a string, 
				;	calculates the sum, and truncated average
				;	      

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Reads string into given array
				;
				; Preconditions: values passed 
				;
				; Receives:
				; prompt = promt message
				; userInput = array to store string
				; limit = max length of input accepted
				; inputCount = length of input string
				;
				; returns: 
				; userInput = string
				; inputCount = string length
				;
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt, userInput, limit, inputCount
					
					;Save registers used
					PUSH	ECX
					PUSH	EDX

					;Print prompt
					MOV		EDX, prompt
					CALL	WriteString

					;Read string and save input string char count 
					MOV		EDX, userInput
					MOV		ECX, limit
					CALL	ReadString

					;Saving/Returing string input and string count
					MOV		userInput, EDX
					MOV		inputCount, EAX

					;Restore registers
					POP		EDX
					POP		ECX

				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Displays string given
				;
				; Preconditions: striing passed 
				;
				; Receives:
				; string = array that has string
				;
				; returns: none
				;
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO string
					
					;Save registers used
					PUSH	EDX

					;Print string 
					MOV		EDX, string
					CALL	WriteString 

					;Restore registers
					POP		EDX

				ENDM


 00000000			.data

				;Intro messages
 00000000 50 72 6F 67 72	introOneMsg		BYTE	"Program Assignment 6: Designing low-level I/O procedures",0
	   61 6D 20 41 73
	   73 69 67 6E 6D
	   65 6E 74 20 36
	   3A 20 44 65 73
	   69 67 6E 69 6E
	   67 20 6C 6F 77
	   2D 6C 65 76 65
	   6C 20 49 2F 4F
	   20 70 72 6F 63
	   65 64 75 72 65
	   73 00
 00000039 57 72 69 74 74	introTwoMsg		BYTE	"Written by: Nick Francisco",0
	   65 6E 20 62 79
	   3A 20 4E 69 63
	   6B 20 46 72 61
	   6E 63 69 73 63
	   6F 00
 00000054 50 6C 65 61 73	prmptOneMsg		BYTE	"Please provide 10 signed decimal integers",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 00
 0000007E 45 61 63 68 20	prmptTwoMsg		BYTE	"Each number needs to be small enought to fit inside a 32 bit register. After you have finished",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 74 20 74 6F
	   20 66 69 74 20
	   69 6E 73 69 64
	   65 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 00
 000000DD 69 6E 70 75 74	prmptThreeMsg	BYTE	"inputting the raw numbers I will display a list of the integers, their sum, and their average",0
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 00
 0000013B 76 61 6C 75 65	prmptFourMsg	BYTE	"value.",0
	   2E 00

				;Data
 00000142 50 6C 65 61 73	getNumMsg		BYTE	"Please enter an signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000162 45 52 52 4F 52	errMsg			BYTE	"ERROR: You did not enter a signed number or you number was to big.",0	
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 74
	   6F 20 62 69 67
	   2E 00
 000001A5  00000015 [		userInput		BYTE	21 DUP(0)
	    00
	   ]
 000001BA 00000015		inputLimit		DWORD	LENGTHOF userInput
 000001BE 00000000		sLen			DWORD	?
 000001C2 00000000		num				SDWORD	0
 000001C6  0000000A [		signedArray		SDWORD	10 DUP(?)
	    00000000
	   ]
 000001EE  0000000C [		charArray		DWORD	12 DUP(?)	
	    00000000
	   ]
 0000021E  0000000C [		revArray		SDWORD	12 DUP(?)
	    00000000
	   ]
 0000024E 0000000A		arryCount		SDWORD	LENGTHOF signedArray
 00000252 00000000		sum				SDWORD  ?
 00000256 00000000		avg				SDWORD	?

				;Result messages
 0000025A 59 6F 75 20 65	numMsg			BYTE	"You entered the following numbers:",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 0000027D 2C 20 00		spacer			BYTE	", ",0
 00000280 54 68 65 20 73	sumMsg			BYTE	"The sum of these numbers is:",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 00
 0000029D 54 68 65 20 74	avgMsg			BYTE	"The truncated average is:",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   00

				;Farewell message
 000002B7 54 68 61 6E 6B	byeMsg			BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00


 00000000			.code
 00000000			main PROC

					;Displaying intro ----------------------------------
 00000000  68 0000013B R		PUSH	OFFSET prmptFourMsg
 00000005  68 000000DD R		PUSH	OFFSET prmptThreeMsg
 0000000A  68 0000007E R		PUSH	OFFSET prmptTwoMsg
 0000000F  68 00000054 R		PUSH	OFFSET prmptOneMsg
 00000014  68 00000039 R		PUSH	OFFSET introTwoMsg
 00000019  68 00000000 R		PUSH	OFFSET introOneMsg
 0000001E  E8 000000EC			CALL	introduction
					; --------------------------------------------------

					
					;Get Input -----------------------------------------
					;Setting loop variables 
 00000023  BE 000001C6 R		MOV		ESI, OFFSET signedArray
 00000028  8B 0D 0000024E R		MOV		ECX, arryCount
 0000002E  BB 00000000			MOV		EBX, 0			
 00000033			_readLoop:
 00000033  68 000001C2 R		PUSH	OFFSET num
 00000038  68 00000162 R		PUSH	OFFSET errMsg
 0000003D  68 000001BE R		PUSH	OFFSET sLen
 00000042  FF 35 000001BA R		PUSH	inputLimit
 00000048  68 000001A5 R		PUSH	OFFSET userInput
 0000004D  68 00000142 R		PUSH	OFFSET getNumMsg
 00000052  E8 00000119			CALL	ReadVal

					;Adding val to array 
 00000057  A1 000001C2 R		MOV		EAX, num
 0000005C  89 06			MOV		[ESI], EAX
 0000005E  83 C6 04			ADD		ESI, 4
 00000061  C7 05 000001C2 R		MOV		num, 0
	   00000000
 0000006B  E2 C6			LOOP	_readLoop
 0000006D  E8 00000000 E		CALL	crlf
					; --------------------------------------------------
					

					;Display Input -------------------------------------
					;Display message
 00000072  BA 0000025A R		MOV		EDX, OFFSET numMsg
 00000077  E8 00000000 E		CALL	WriteString
 0000007C  E8 00000000 E		CALL	crlf

					;Setting loop variables 
 00000081  8B 0D 0000024E R		MOV		ECX, arryCount
 00000087  BE 000001C6 R		MOV		ESI, OFFSET signedArray

					;Loop through array and call WriteVal for each number
 0000008C			_writeLoop:
 0000008C  68 0000021E R		PUSH	OFFSET revArray
 00000091  68 000001EE R		PUSH	OFFSET charArray
 00000096  FF 36			PUSH	[ESI]
 00000098  E8 00000160			CALL	WriteVal
 0000009D  83 C6 04			ADD		ESI, 4
					;Print space or skip if last element
 000000A0  83 F9 01			CMP		ECX, 1 
 000000A3  74 0A			JE		_noSpacer
 000000A5  BA 0000027D R		MOV		EDX, OFFSET spacer
 000000AA  E8 00000000 E		CALL	WriteString
 000000AF			_noSpacer:
 000000AF  E2 DB			LOOP	_writeLoop
 000000B1  E8 00000000 E		CALL	crlf
 000000B6  E8 00000000 E		CALL	crlf
					; --------------------------------------------------

					
					;Calculate Sum -------------------------------------
 000000BB  68 0000021E R		PUSH	OFFSET revArray
 000000C0  68 000001EE R		PUSH	OFFSET charArray
 000000C5  FF 35 0000024E R		PUSH	arryCount
 000000CB  68 00000280 R		PUSH	OFFSET sumMsg
 000000D0  68 000001C6 R		PUSH	OFFSET signedArray
 000000D5  E8 00000190			CALL	calcSum
					; --------------------------------------------------
					

					;Calculate Average ---------------------------------
 000000DA  68 0000021E R		PUSH	OFFSET revArray
 000000DF  68 000001EE R		PUSH	OFFSET charArray
 000000E4  FF 35 0000024E R		PUSH	arryCount
 000000EA  68 0000029D R		PUSH	OFFSET avgMsg
 000000EF  68 000001C6 R		PUSH	OFFSET signedArray
 000000F4  E8 000001AA			CALL	calcAvg
					; --------------------------------------------------
					

					;Displaying farewell -------------------------------
 000000F9  E8 00000000 E		CALL	crlf
 000000FE  68 000002B7 R		PUSH	OFFSET byeMsg
 00000103  E8 000001DA			CALL	farewell
					; --------------------------------------------------

					Invoke ExitProcess,0	; exit to operating system
 00000108  6A 00	   *	    push   +000000000h
 0000010A  E8 00000000 E   *	    call   ExitProcess
 0000010F			main ENDP

				; --------------------------------------------------------
				;Name: introduction

				;Description: displays intro and prompt messages

				;Preconditions: None

				;Postconditions: Registers saved and restored

				;Receives: Global variables - intro and prompt messages

				;Retuens: None
				; --------------------------------------------------------
 0000010F			introduction PROC 

					;Preserve EBP and Assign static stack-frame pointer
 0000010F  55				PUSH	EBP         
 00000110  8B EC			MOV		EBP, ESP    

					;Save Registers
 00000112  60				PUSHAD

					;Intro one message
 00000113  8B 55 08			MOV		EDX, [EBP + 8]	
 00000116  E8 00000000 E		CALL	WriteString
 0000011B  E8 00000000 E		CALL	crlf

					;Intro two message
 00000120  8B 55 0C			MOV		EDX, [EBP + 12]	
 00000123  E8 00000000 E		CALL	WriteString
 00000128  E8 00000000 E		CALL	crlf
 0000012D  E8 00000000 E		CALL	crlf

					;Prompt one message
 00000132  8B 55 10			MOV		EDX, [EBP + 16]	
 00000135  E8 00000000 E		CALL	WriteString
 0000013A  E8 00000000 E		CALL	crlf

					;Prompt two message
 0000013F  8B 55 14			MOV		EDX, [EBP + 20]	
 00000142  E8 00000000 E		CALL	WriteString
 00000147  E8 00000000 E		CALL	crlf

					;Prompt three message
 0000014C  8B 55 18			MOV		EDX, [EBP + 24]	
 0000014F  E8 00000000 E		CALL	WriteString
 00000154  E8 00000000 E		CALL	crlf

					;Prompt four message
 00000159  8B 55 1C			MOV		EDX, [EBP + 28]	
 0000015C  E8 00000000 E		CALL	WriteString
 00000161  E8 00000000 E		CALL	crlf
 00000166  E8 00000000 E		CALL	crlf

					;Restore register
 0000016B  61				POPAD

 0000016C  5D				POP		EBP
 0000016D  C2 0018			RET		24

 00000170			introduction ENDP

				; --------------------------------------------------------
				;Name: ReadVal

				;Description: Read string in and converts to SWORD

				;Preconditions: None

				;Postconditions: Registers saved and restored

				;Receives: Global variables - Array, num, prompt, and error msg

				;Retuens: SDWORD
				; --------------------------------------------------------
 00000170			ReadVal PROC

					;Preserve EBP and Assign static stack-frame pointer
 00000170  55				PUSH	EBP         
 00000171  8B EC			MOV		EBP, ESP    

					;Save Registers
 00000173  60				PUSHAD

					;[EBP + 8] getNumMsg
					;[EBP + 12] userInput array
					;[EBP + 16] inputLimit
					;[EBP + 20] sLen
					;[EBP + 24] errMsg
					;[EBP + 28] num

 00000174			_start:

					;Call Macro mGetString
					mGetString	[EBP + 8], [EBP + 12], [EBP + 16], [EBP + 20]
 00000174  51		     1		PUSH	ECX
 00000175  52		     1		PUSH	EDX
 00000176  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000179  E8 00000000 E     1		CALL	WriteString
 0000017E  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 00000181  8B 4D 10	     1		MOV		ECX, [EBP + 16]
 00000184  E8 00000000 E     1		CALL	ReadString
 00000189  89 55 0C	     1		MOV		[EBP + 12], EDX
 0000018C  89 45 14	     1		MOV		[EBP + 20], EAX
 0000018F  5A		     1		POP		EDX
 00000190  59		     1		POP		ECX

					
					;userInput array to ESI and sLen to ECX for loop
 00000191  8B 75 0C			MOV		ESI, [EBP + 12]
 00000194  8B 4D 14			MOV		ECX, [EBP + 20]

					;Used as bool to check for negative number
 00000197  BA 00000000			MOV		EDX, 0

				;Validate input
					;Check if first char in string is + or -
 0000019C  B0 2B			MOV		AL, "+"
 0000019E  3A 06			CMP		AL, [ESI]
 000001A0  74 08			JE		_plus
 000001A2  B0 2D			MOV		AL, "-"
 000001A4  3A 06			CMP		AL, [ESI]
 000001A6  74 0A			JE		_minus

					;No + or -
 000001A8  EB 15			JMP		_signComp

 000001AA			_plus:
					;Move to next char in string and Sub 1 from sLen
 000001AA  83 C6 01			ADD		ESI, 1
 000001AD  83 E9 01			SUB		ECX, 1
 000001B0  EB 0D			JMP		_signComp

 000001B2			_minus:
					;Set negative bool, Move to next char in string, Sub 1 from sLen
					;EDI used for Negative bool
 000001B2  BF 00000001			MOV		EDI, 1			
 000001B7  83 C6 01			ADD		ESI, 1
 000001BA  83 E9 01			SUB		ECX, 1
 000001BD  EB 00			JMP		_signComp
					
 000001BF			_signComp:

				;Check that all chars are numbers
					;Setting loop counter and registers 
 000001BF  BB 00000000			MOV		EBX, 0			
					;EBX used to store and build number 
					;ECS already has counter 
					;ESI already has string 

 000001C4			_checkChar:
					;Load byte into AL
 000001C4  AC				LODSB

					;Check if char is a number
 000001C5  3C 30			CMP		AL, 48
 000001C7  72 1B			JB		_error
 000001C9  3C 39			CMP		AL, 57
 000001CB  77 17			JA		_error

					;Char is a number converting ASCII to number
 000001CD  2C 30			SUB		AL, 48

					;Building SDWORD
 000001CF  6B DB 0A			IMUL	EBX, 10
 000001D2  72 10			JC		_error
 000001D4  03 D8			ADD		EBX, EAX
 000001D6  72 0C			JC		_error
 000001D8  E2 EA			LOOP	_checkChar

					;Check negative bool
 000001DA  83 FF 01			CMP		EDI, 1
 000001DD  75 14			JNE		_complete
 000001DF  6B DB FF			IMUL	EBX, -1
 000001E2  EB 0F			JMP		_complete

 000001E4			_error:
					;Non-Number in string get new num returning to begining
 000001E4  8B 55 18			MOV		EDX, [EBP + 24] 
 000001E7  E8 00000000 E		CALL	WriteString
 000001EC  E8 00000000 E		CALL	crlf
 000001F1  EB 81			JMP		_start

 000001F3			_complete:

					;Save/Return SWORD
 000001F3  8B 45 1C			MOV		EAX, [EBP + 28]
 000001F6  89 18			MOV		[EAX], EBX
					
					;Restore register
 000001F8  61				POPAD

 000001F9  5D				POP		EBP
 000001FA  C2 0018			RET		24

 000001FD			ReadVal ENDP

				; --------------------------------------------------------
				;Name: WriteVal

				;Description: Writes SDWORD array as string

				;Preconditions: None

				;Postconditions: Registers saved and restored

				;Receives: Global variables - charArray, revArray,  prompt, 
				;	and error msg

				;Retuens: None
				; --------------------------------------------------------
 000001FD			WriteVal PROC

					;Preserve EBP and Assign static stack-frame pointer
 000001FD  55				PUSH	EBP         
 000001FE  8B EC			MOV		EBP, ESP    

					;Save Registers
 00000200  60				PUSHAD
					
					;Used for loop to count amoutnt of numbers
 00000201  B9 00000000			MOV		ECX, 0

					;Number is EAX
 00000206  8B 45 08			MOV		EAX, [EBP + 8]

					;charArry adress in EDI 
 00000209  8B 7D 0C			MOV		EDI, [EBP + 12]

					;Check if negative num in EAX
 0000020C  8B 45 08			MOV		EAX, [EBP + 8]
 0000020F  83 F8 00			CMP		EAX, 0
 00000212  7D 03			JGE		_isPosCheckOne

					;Multiply number by -1 to get positive, will add "-" at end 
 00000214  6B C0 FF			IMUL	EAX, -1

					
 00000217			_isPosCheckOne:

				;Determine SDWORD length and convert to ASCII store individual numbers in charArray
 00000217  BB 0000000A			MOV		EBX, 10

					;Add 0 to begining of string
 0000021C  50				PUSH	EAX
 0000021D  B0 00			MOV		AL, 0
 0000021F  AA				STOSB	
 00000220  58				POP		EAX

 00000221			_buildCharArray:
 00000221  99				CDQ		
 00000222  F7 FB			IDIV	EBX

					;Convert remainder into ASCII
 00000224  83 C2 30			ADD		EDX, 48

					;Save remainder in array, increase count
 00000227  50				PUSH	EAX
 00000228  8B C2			MOV		EAX, EDX
 0000022A  AA				STOSB	;EAX to	[EDI]			
 0000022B  58				POP		EAX
 0000022C  83 C1 01			ADD		ECX, 1
 0000022F  83 F8 00			CMP		EAX, 0
 00000232  75 ED			JNE		_buildCharArray


					;Check if negative num 
 00000234  8B 45 08			MOV		EAX, [EBP + 8]
 00000237  83 F8 00			CMP		EAX, 0				
 0000023A  7D 0B			JGE		_isPosCheckTwo

					;EAX 0 after division used to check if negative
					;Add negative char
 0000023C  B8 00000000			MOV		EAX, 0
 00000241  B0 2D			MOV		AL, 45
 00000243  AA				STOSB
 00000244  83 C1 01			ADD		ECX, 1

 00000247			_isPosCheckTwo:
					
				;Reverse string 
					;Set up arrays
 00000247  83 C1 01			ADD		ECX, 1
 0000024A  8B 75 0C			MOV		ESI, [EBP + 12]
 0000024D  03 F1			ADD		ESI, ECX
 0000024F  4E				DEC		ESI
 00000250  8B 7D 10			MOV		EDI, [EBP + 16]

 00000253			_reverse:
					;Reversing byte
 00000253  FD				STD
 00000254  AC				LODSB
 00000255  FC				CLD
 00000256  AA				STOSB
 00000257  E2 FA			LOOP	_reverse

					;Display reversed string in EDX
 00000259  8B 55 10			MOV		EDX, [EBP + 16]
					mDisplayString	EDX
 0000025C  52		     1		PUSH	EDX
 0000025D  8B D2	     1		MOV		EDX, EDX
 0000025F  E8 00000000 E     1		CALL	WriteString 
 00000264  5A		     1		POP		EDX
					
					;Restore register
 00000265  61				POPAD

 00000266  5D				POP		EBP
 00000267  C2 000C			RET		12

 0000026A			WriteVal ENDP

				; --------------------------------------------------------
				;Name: calcSum

				;Description: Calculates total for given array

				;Preconditions: None

				;Postconditions: Registers saved and restored

				;Receives: Global variables - signedArray, count, msg, charArray,
				;	and revArray

				;Retuens: none
				; --------------------------------------------------------
 0000026A			calcSum PROC

 0000026A  55				PUSH	EBP         
 0000026B  8B EC			MOV		EBP, ESP    

					;Save Registers
 0000026D  60				PUSHAD

					;Sum Message
 0000026E  8B 55 0C			MOV		EDX, [EBP + 12]	
 00000271  E8 00000000 E		CALL	WriteString

					;Setting up loop
 00000276  8B 4D 10			MOV		ECX, [EBP + 16] ;array count 
 00000279  8B 75 08			MOV		ESI, [EBP + 8]	;signedArray
 0000027C  B8 00000000			MOV		EAX, 0

 00000281			_sumLoop:
 00000281  03 06			ADD		EAX, [ESI]
 00000283  83 C6 04			ADD		ESI, 4
 00000286  E2 F9			LOOP	_sumLoop

					;Printing sum value
 00000288  FF 75 18			PUSH	[EBP + 24]		;revArray
 0000028B  FF 75 14			PUSH	[EBP + 20]		;charArray
 0000028E  50				PUSH	EAX
 0000028F  E8 FFFFFF69			CALL	WriteVal
 00000294  E8 00000000 E		CALL	crlf
 00000299  E8 00000000 E		CALL	crlf

					;Restore register
 0000029E  61				POPAD

 0000029F  5D				POP		EBP
 000002A0  C2 0014			RET		20

 000002A3			calcSum ENDP

				; --------------------------------------------------------
				;Name: calcAvg

				;Description: Calculates average for given array

				;Preconditions: None

				;Postconditions: Registers saved and restored

				;Receives: Global variables - signedArray, count, msg, charArray,
				;	and revArray

				;Retuens: none
				; --------------------------------------------------------
 000002A3			calcAvg PROC

 000002A3  55				PUSH	EBP         
 000002A4  8B EC			MOV		EBP, ESP    

					;Save Registers
 000002A6  60				PUSHAD

					;Avg Message
 000002A7  8B 55 0C			MOV		EDX, [EBP + 12]	
 000002AA  E8 00000000 E		CALL	WriteString

					;Setting up loop
 000002AF  8B 4D 10			MOV		ECX, [EBP + 16] ;array count 
 000002B2  8B 75 08			MOV		ESI, [EBP + 8]	;signedArray
 000002B5  B8 00000000			MOV		EAX, 0

 000002BA			_avgLoop:
 000002BA  03 06			ADD		EAX, [ESI]
 000002BC  83 C6 04			ADD		ESI, 4
 000002BF  E2 F9			LOOP	_avgLoop

 000002C1  8B 5D 10			MOV		EBX, [EBP + 16]
 000002C4  99				CDQ
 000002C5  F7 FB			IDIV	EBX				;Divid total in EAX by array count

					;Printing sum value
 000002C7  FF 75 18			PUSH	[EBP + 24]		;revArray
 000002CA  FF 75 14			PUSH	[EBP + 20]		;charArray
 000002CD  50				PUSH	EAX
 000002CE  E8 FFFFFF2A			CALL	WriteVal
 000002D3  E8 00000000 E		CALL	crlf
 000002D8  E8 00000000 E		CALL	crlf

					;Restore register
 000002DD  61				POPAD

 000002DE  5D				POP		EBP
 000002DF  C2 0014			RET		20

 000002E2			calcAvg ENDP

				; --------------------------------------------------------
				;Name: farewell

				;Description: displays farewell message

				;Preconditions: None

				;Postconditions: Registers saved and restored

				;Receives: Global variables - byeMsg

				;Retuens: None
				; --------------------------------------------------------
 000002E2			farewell PROC

 000002E2  55				PUSH	EBP         
 000002E3  8B EC			MOV		EBP, ESP    

					;Save Registers
 000002E5  60				PUSHAD

					;Farewell Message
 000002E6  8B 55 08			MOV		EDX, [EBP + 8]	
 000002E9  E8 00000000 E		CALL	WriteString
 000002EE  E8 00000000 E		CALL	crlf

					;Restore register
 000002F3  61				POPAD

 000002F4  5D				POP		EBP
 000002F5  C2 0004			RET		4

 000002F8			farewell ENDP

				END main

Microsoft (R) Macro Assembler Version 14.29.30141.0	    06/06/22 22:57:32
#Program Template     (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002CB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002F8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000170 _TEXT	Length= 0000008D Public STDCALL
  _start . . . . . . . . . . . .	L Near	 00000174 _TEXT	
  _plus  . . . . . . . . . . . .	L Near	 000001AA _TEXT	
  _minus . . . . . . . . . . . .	L Near	 000001B2 _TEXT	
  _signComp  . . . . . . . . . .	L Near	 000001BF _TEXT	
  _checkChar . . . . . . . . . .	L Near	 000001C4 _TEXT	
  _error . . . . . . . . . . . .	L Near	 000001E4 _TEXT	
  _complete  . . . . . . . . . .	L Near	 000001F3 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001FD _TEXT	Length= 0000006D Public STDCALL
  _isPosCheckOne . . . . . . . .	L Near	 00000217 _TEXT	
  _buildCharArray  . . . . . . .	L Near	 00000221 _TEXT	
  _isPosCheckTwo . . . . . . . .	L Near	 00000247 _TEXT	
  _reverse . . . . . . . . . . .	L Near	 00000253 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcAvg  . . . . . . . . . . . .	P Near	 000002A3 _TEXT	Length= 0000003F Public STDCALL
  _avgLoop . . . . . . . . . . .	L Near	 000002BA _TEXT	
calcSum  . . . . . . . . . . . .	P Near	 0000026A _TEXT	Length= 00000039 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 00000281 _TEXT	
farewell . . . . . . . . . . . .	P Near	 000002E2 _TEXT	Length= 00000016 Public STDCALL
introduction . . . . . . . . . .	P Near	 0000010F _TEXT	Length= 00000061 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000010F Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 00000033 _TEXT	
  _writeLoop . . . . . . . . . .	L Near	 0000008C _TEXT	
  _noSpacer  . . . . . . . . . .	L Near	 000000AF _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arryCount  . . . . . . . . . . .	DWord	 0000024E _DATA	
avgMsg . . . . . . . . . . . . .	Byte	 0000029D _DATA	
avg  . . . . . . . . . . . . . .	DWord	 00000256 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byeMsg . . . . . . . . . . . . .	Byte	 000002B7 _DATA	
charArray  . . . . . . . . . . .	DWord	 000001EE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errMsg . . . . . . . . . . . . .	Byte	 00000162 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getNumMsg  . . . . . . . . . . .	Byte	 00000142 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputLimit . . . . . . . . . . .	DWord	 000001BA _DATA	
introOneMsg  . . . . . . . . . .	Byte	 00000000 _DATA	
introTwoMsg  . . . . . . . . . .	Byte	 00000039 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numMsg . . . . . . . . . . . . .	Byte	 0000025A _DATA	
num  . . . . . . . . . . . . . .	DWord	 000001C2 _DATA	
prmptFourMsg . . . . . . . . . .	Byte	 0000013B _DATA	
prmptOneMsg  . . . . . . . . . .	Byte	 00000054 _DATA	
prmptThreeMsg  . . . . . . . . .	Byte	 000000DD _DATA	
prmptTwoMsg  . . . . . . . . . .	Byte	 0000007E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revArray . . . . . . . . . . . .	DWord	 0000021E _DATA	
sLen . . . . . . . . . . . . . .	DWord	 000001BE _DATA	
signedArray  . . . . . . . . . .	DWord	 000001C6 _DATA	
spacer . . . . . . . . . . . . .	Byte	 0000027D _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 00000280 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000252 _DATA	
userInput  . . . . . . . . . . .	Byte	 000001A5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
